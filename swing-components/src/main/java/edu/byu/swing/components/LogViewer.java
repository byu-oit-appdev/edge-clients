/*
 * StatusViewer.java
 *
 * Created on Jan 30, 2009, 10:10:06 AM
 */
package edu.byu.swing.components;

import edu.byu.framework.swing.util.BYUAppenderListener;
import edu.byu.framework.swing.util.BYUAppender;
import edu.byu.framework.swing.util.DialogUtil;
import edu.byu.swing.models.ListTableModel;
import java.awt.Frame;
import javax.swing.SwingWorker;
import org.apache.log4j.Level;
import org.apache.log4j.spi.LoggingEvent;

/**
 * Provides a view for Log4J logs
 *
 * @version 1.0.0
 * @since 1.0.0
 * @author tylers2
 */
public class LogViewer extends javax.swing.JDialog {

    private static final long serialVersionUID = -2620801979597239850L;
    private final LoggingEventTableModel debugModel;
    private final LoggingEventTableModel infoModel;
    private final LoggingEventTableModel warnModel;
    private final LoggingEventTableModel errorModel;

    /** Creates new LogViewer
     * @param parent
     * @param modal
     */
    public LogViewer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        debugModel = new LoggingEventTableModel();
        infoModel = new LoggingEventTableModel();
        warnModel = new LoggingEventTableModel();
        errorModel = new LoggingEventTableModel();
        initComponents();
        DialogUtil.centerDialog(parent, this);
    }

    /**
     * Creates a new modal LogViewer
     * @param parent
     */
    public LogViewer(java.awt.Frame parent) {
        this(parent, true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btClear = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Log Viewer");

        btClear.setText("Clear");
        btClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearActionPerformed(evt);
            }
        });

        btClose.setText("Close");
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        jTable1.setModel(infoModel);
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Info", jScrollPane1);

        jTable2.setModel(warnModel);
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Warn", jScrollPane2);

        jTable3.setModel(errorModel);
        jScrollPane3.setViewportView(jTable3);

        jTabbedPane1.addTab("Error", jScrollPane3);

        jTable4.setModel(debugModel);
        jTable4.setToolTipText("Log Viewer");
        jScrollPane4.setViewportView(jTable4);

        jTabbedPane1.addTab("Debug", jScrollPane4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btClose))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btClose)
                    .addComponent(btClear))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btCloseActionPerformed

    private void btClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearActionPerformed
        debugModel.clear();
        infoModel.clear();
        warnModel.clear();
        errorModel.clear();
    }//GEN-LAST:event_btClearActionPerformed
    private static LogViewer dialog;

    /**
     * Shows a log dialog box.
     * @param frame
     */
    public static void showDialog(Frame frame) {
        if (dialog == null) {
            dialog = new LogViewer(frame, false);
            BYUAppender.addListener(new BYUAppenderListener() {

                public void log(LoggingEvent loggingEvent) {
                    switch (loggingEvent.getLevel().toInt()) {
                        case Level.DEBUG_INT:
                            dialog.debugModel.addRow(loggingEvent);
                            break;
                        case Level.INFO_INT:
                            dialog.infoModel.addRow(loggingEvent);
                            break;
                        case Level.WARN_INT:
                            dialog.warnModel.addRow(loggingEvent);
                            break;
                        case Level.ERROR_INT:
                            dialog.errorModel.addRow(loggingEvent);
                            break;
                    }
                }
            });
        }

        new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                LogViewer.dialog.setVisible(true);
                return null;
            }
        }.execute();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClear;
    private javax.swing.JButton btClose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
    private final static String[] columnNames = new String[]{"Thread", "Message"};

    private class LoggingEventTableModel extends ListTableModel<LoggingEvent> {

        private static final long serialVersionUID = -3531623096101582557L;

        public LoggingEventTableModel() {
            super(columnNames);
        }

        @Override
        public Object getDataFromRow(LoggingEvent row, int index) {
            switch (index) {
                case 0:
                    return row.getThreadName();
                case 1:
                    return row.getMessage();
            }

            return null;
        }
    }
}
